import telebot
import random
import schedule
import time
import threading
import logging
from dotenv import load_dotenv
import os
import yfinance as yf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not BOT_TOKEN or not CHAT_ID:
    print("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏ BOT_TOKEN –∏ CHAT_ID –≤ .env")
    exit()

logging.info(f"–¢–æ–∫–µ–Ω –∏ CHAT_ID –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {BOT_TOKEN[:5]}... {CHAT_ID}")
bot = telebot.TeleBot(BOT_TOKEN)

is_sending_signals = False

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
assets = ['EURUSD=X', 'GBPUSD=X', 'USDJPY=X']

def generate_signal(asset):
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}")
        data = yf.download(asset, period='1d', interval='1m')
        if data.empty:
            logging.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}")
            return None

        close_prices = data['Close']
        sma = close_prices.rolling(window=14).mean().iloc[-1]
        current_price = close_prices.iloc[-1]
        direction = '‚¨ÜÔ∏è' if current_price > sma else '‚¨áÔ∏è'
        probability = random.randint(60, 80)

        if probability < 75:
            logging.info(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {asset} –ø—Ä–æ–ø—É—â–µ–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {probability}%)")
            return None

        message = (
            f"üîî **–°–∏–≥–Ω–∞–ª –¥–ª—è Binarium!**\n\n"
            f"–ê–∫—Ç–∏–≤: {asset.replace('=X', '')}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n"
            f"–¶–µ–Ω–∞: {current_price:.5f}\n"
            f"–í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: 5 –º–∏–Ω—É—Ç\n"
            f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {probability}%\n"
            f"–í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω ‚Äî —Ç–æ—Ä–≥—É–π –Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫!"
        )
        return message
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {asset}: {e}")
        return None

def send_signals():
    if is_sending_signals:
        for asset in assets:
            signal = generate_signal(asset)
            if signal:
                try:
                    bot.send_message(CHAT_ID, signal, parse_mode='Markdown')
                    logging.info(f"–°–∏–≥–Ω–∞–ª –¥–ª—è {asset} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {asset}: {e}")

schedule.every(5).minutes.do(send_signals)

def run_schedule():
    while is_sending_signals:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def start_message(message):
    global is_sending_signals
    if not is_sending_signals:
        is_sending_signals = True
        threading.Thread(target=run_schedule, daemon=True).start()
        bot.reply_to(message, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –°–∏–≥–Ω–∞–ª—ã (—Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é >=75%) –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è 3 –∞–∫—Ç–∏–≤–æ–≤.")
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        bot.reply_to(message, "–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@bot.message_handler(commands=['stop'])
def stop_message(message):
    global is_sending_signals
    is_sending_signals = False
    bot.reply_to(message, "üõë –°–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    logging.info("–°–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

@bot.message_handler(commands=['status'])
def status_message(message):
    status = "—Ä–∞–±–æ—Ç–∞–µ—Ç" if is_sending_signals else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    bot.reply_to(message, f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status}")

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é polling...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞—é polling...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
